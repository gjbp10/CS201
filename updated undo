package librahubmanagement;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Color;
import java.awt.Font;
import java.util.Stack;

public class Mainframe extends javax.swing.JFrame {
	
	private Stack<String[]> operationStack = new Stack<>();
	private int numberOfBooks; // Stores the maximum number of books
    private int booksAdded = 0; // Tracks the number of books added
    
    public Mainframe() {
        initComponents();
        addBook();
        removeBook();
        undoAction();
        searchBook();
        initializeTableSize();

        // Clears the table model
        DefaultTableModel model = (DefaultTableModel) tbl_displayTable.getModel();
        model.setRowCount(0);

        // Updates the number of books to 0
        jLabel2.setText(String.valueOf(0));
    }

    private void initializeTableSize() {
    	
        // Prompt user for the number of books to initialize the table size
        numberOfBooks = Integer.parseInt(JOptionPane.showInputDialog(this, "How many books would you like to enter?", "Input Book Quantity", JOptionPane.PLAIN_MESSAGE));

        // Create a model with the specified number of rows
        DefaultTableModel model = (DefaultTableModel) tbl_displayTable.getModel();
        model.setRowCount(numberOfBooks);
        
        
    }
    
    private void addBook() {
        btn_Add.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (booksAdded < numberOfBooks) { // Check if the limit has been reached
                    String title = txt_title.getText();
                    String ISBN = txt_ISBN.getText();
                    String author = txt_Author.getText();
                    String genre = txt_Genre.getText();

                    DefaultTableModel model = (DefaultTableModel) tbl_displayTable.getModel();
                    model.addRow(new Object[]{title, ISBN, author, genre});
                    booksAdded++; // Increments the count of added books
                    
                    // Record the operation for undo
                    operationStack.push(new String[]{"add", ISBN, title, author, genre});

                    // Update the number of books label
                    jLabel2.setText(String.valueOf(model.getRowCount()));

                    // Clears input fields
                    txt_title.setText("");
                    txt_ISBN.setText("");
                    txt_Author.setText("");
                    txt_Genre.setText("");
                } else {
                    // Shows message when the user has reached the book limit
                    JOptionPane.showMessageDialog(null, "You've reached the limit of " + numberOfBooks + " books." + " Please delete some books to replace them with.", "Error: Limit Reached.", JOptionPane.WARNING_MESSAGE);
                }
            }
        });
    }
    
    private void searchBook() {
        btn_Search.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Retrieving the search query entered in the search bar and converting it to lowercase for case-insensitive comparison
                String searchQuery = txt_SearchBar.getText().toLowerCase();
                
                // Getting the table model that contains the data of the display table
                DefaultTableModel model = (DefaultTableModel) tbl_displayTable.getModel();
                
                // Storing the number of rows and columns in the table
                int rowCount = model.getRowCount();
                int colCount = model.getColumnCount();
                
                // Flag to track whether a matching item is found
                boolean found = false;

                // Looping through each row of the table
                for (int i = 0; i < rowCount; i++) {
                    // Looping through each column in the current row
                    for (int j = 0; j < colCount; j++) {
                        // Checking if the current cell is not null and if it contains the search query (case-insensitive)
                        if (model.getValueAt(i, j) != null && model.getValueAt(i, j).toString().toLowerCase().contains(searchQuery)) {
                            // If a match is found, select the corresponding row in the table
                            tbl_displayTable.setRowSelectionInterval(i, i);
                            // Set the flag to true indicating that a match was found
                            found = true;
                            // Break out of the inner loop since the match is already found
                            break;
                        }
                    }
                    // Break out of the outer loop if a match is found
                    if (found) break;
                }

                // If no match is found after searching through the table, show a message dialog indicating no results
                if (!found) {
                    JOptionPane.showMessageDialog(null, "No match found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
    }
    
    private void removeBook() {
        btn_Remove.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DefaultTableModel model = (DefaultTableModel) tbl_displayTable.getModel();
                int selectedRow = tbl_displayTable.getSelectedRow();

                if (selectedRow >= 0) {
                    // Store book details before removal
                    String isbn = model.getValueAt(selectedRow, 0).toString();
                    String title = model.getValueAt(selectedRow, 1).toString();
                    String author = model.getValueAt(selectedRow, 2).toString();
                    String genre = model.getValueAt(selectedRow, 3).toString();

                    // Record the operation for undo
                    operationStack.push(new String[]{"remove", isbn, title, author, genre});

                    // Remove the selected row
                    model.removeRow(selectedRow);

                    // Update the number of books
                    jLabel2.setText(" " + model.getRowCount());
                } else {
                    JOptionPane.showMessageDialog(null, "Please select a book to delete", "Selection Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    private void undoAction() {
        btn_Undo_1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!operationStack.isEmpty()) {
                    String[] lastOperation = operationStack.pop(); // Pop the last operation
                    DefaultTableModel model = (DefaultTableModel) tbl_displayTable.getModel();

                    if (lastOperation[0].equals("add")) {
                        // Undo add operation (remove the last added book)
                        if (lastOperation.length > 1) {
                            try {
                                model.removeRow(model.getRowCount() - 1); // Remove the last row
                            } catch (Exception e1) {
                                System.err.println("Error removing row: " + e1.getMessage());
                            }
                        }
                    } else if (lastOperation[0].equals("remove")) {
                        // Undo remove operation (re-add the removed book)
                        model.addRow(new Object[]{lastOperation[1], lastOperation[2], lastOperation[3], lastOperation[4]});
                    }

                    // Update the number of books label
                    jLabel2.setText(" " + model.getRowCount());
                } else {
                    JOptionPane.showMessageDialog(null, "No operations to undo.", "Undo Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
    }

	private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbl_bookTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_displayTable = new javax.swing.JTable();
        txt_title = new javax.swing.JTextField();
        lbl_ISBN = new javax.swing.JLabel();
        txt_ISBN = new javax.swing.JTextField();
        lbl_Author = new javax.swing.JLabel();
        txt_Author = new javax.swing.JTextField();
        lbl_Genre = new javax.swing.JLabel();
        txt_Genre = new javax.swing.JTextField();
        btn_Add = new javax.swing.JButton();
        btn_Remove = new javax.swing.JButton();
        btn_Undo = new javax.swing.JButton();
        btn_Search = new javax.swing.JButton();
        txt_SearchBar = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        lbl_Title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lbl_bookTitle.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        lbl_bookTitle.setText("Book Title");

        tbl_displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ISBN", "Title", "Author", "Genre"
            }
        ));
        jScrollPane1.setViewportView(tbl_displayTable);
        if (tbl_displayTable.getColumnModel().getColumnCount() > 0) {
            tbl_displayTable.getColumnModel().getColumn(0).setHeaderValue("ISBN");
            tbl_displayTable.getColumnModel().getColumn(1).setHeaderValue("Title");
            tbl_displayTable.getColumnModel().getColumn(2).setHeaderValue("Author");
            tbl_displayTable.getColumnModel().getColumn(3).setHeaderValue("Genre");
        }

        lbl_ISBN.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        lbl_ISBN.setText("ISBN No.");

        lbl_Author.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        lbl_Author.setText("Author");

        lbl_Genre.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        lbl_Genre.setText("Genre");

        btn_Add.setBackground(new java.awt.Color(222, 177, 0));
        btn_Add.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btn_Add.setForeground(new java.awt.Color(255, 255, 255));
        btn_Add.setText("Add");

        btn_Remove.setBackground(new java.awt.Color(153, 0, 0));
        btn_Remove.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btn_Remove.setForeground(new java.awt.Color(255, 255, 255));
        btn_Remove.setText("Remove");

        btn_Search.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btn_Search.setText("Search");

        jPanel2.setBackground(new java.awt.Color(102, 0, 0));

        lbl_Title.setFont(new java.awt.Font("High Tower Text", 1, 32)); // NOI18N
        lbl_Title.setForeground(new java.awt.Color(255, 255, 255));
        lbl_Title.setText("LibraHub");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(lbl_Title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(lbl_Title)
                .addGap(20, 20, 20))
        );

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel1.setText("No. of Books:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("0");
        
        btn_Undo_1 = new JButton("Undo");
        btn_Undo_1.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        btn_Undo_1.setBackground(new Color(255, 127, 80));
        
        JButton btn_Sort = new JButton("Sort");
        btn_Sort.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        	}
        });
        btn_Sort.setFont(new Font("Century Gothic", Font.PLAIN, 12));
        btn_Sort.setBackground(new Color(255, 127, 80));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(42)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addComponent(lbl_bookTitle)
        					.addContainerGap(775, Short.MAX_VALUE))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(lbl_ISBN)
        							.addComponent(txt_ISBN, GroupLayout.PREFERRED_SIZE, 258, GroupLayout.PREFERRED_SIZE)
        							.addComponent(lbl_Author)
        							.addComponent(txt_Author, GroupLayout.PREFERRED_SIZE, 258, GroupLayout.PREFERRED_SIZE)
        							.addComponent(lbl_Genre)
        							.addComponent(txt_Genre, GroupLayout.PREFERRED_SIZE, 258, GroupLayout.PREFERRED_SIZE)
        							.addComponent(btn_Add, Alignment.TRAILING))
        						.addComponent(txt_title, GroupLayout.PREFERRED_SIZE, 258, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addComponent(txt_SearchBar, GroupLayout.PREFERRED_SIZE, 336, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(btn_Search))
        						.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING, false)
        							.addGroup(jPanel1Layout.createSequentialGroup()
        								.addComponent(jLabel1)
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addComponent(jLabel2)
        								.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(btn_Sort, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
        								.addGap(18)
        								.addComponent(btn_Undo_1)
        								.addGap(18)
        								.addComponent(btn_Remove))
        							.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 420, GroupLayout.PREFERRED_SIZE)))
        					.addGap(52))))
        		.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(43)
        			.addComponent(lbl_bookTitle)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(txt_title)
        				.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(txt_SearchBar, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        					.addComponent(btn_Search, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)))
        			.addGap(18)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addComponent(lbl_ISBN)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(txt_ISBN, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(lbl_Author)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(txt_Author, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(lbl_Genre)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(txt_Genre, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(btn_Add, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE))
        				.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 271, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
        					.addComponent(btn_Undo_1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(btn_Remove, GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel1)
        						.addComponent(jLabel2)))
        				.addComponent(btn_Sort, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel1.setLayout(jPanel1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mainframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btn_Add;
    private javax.swing.JButton btn_Remove;
    private javax.swing.JButton btn_Search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_Author;
    private javax.swing.JLabel lbl_Genre;
    private javax.swing.JLabel lbl_ISBN;
    private javax.swing.JLabel lbl_Title;
    private javax.swing.JLabel lbl_bookTitle;
    private javax.swing.JTable tbl_displayTable;
    private javax.swing.JTextField txt_Author;
    private javax.swing.JTextField txt_Genre;
    private javax.swing.JTextField txt_ISBN;
    private javax.swing.JTextField txt_SearchBar;
    private javax.swing.JTextField txt_title;
    private JButton btn_Undo;
    private JButton btn_Undo_1;
}
